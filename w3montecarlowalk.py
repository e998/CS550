# 1/10/2019
# CS550 Class/HW Winter
# Monte Carlo Walk & Dart Simulation

# Answer: 22 blocks (Longest walk where you'll be within walking distance at least 50% of the time)

""" 
Solution Explantion:
In the Monte Carlo simulation, for different lengths between the values of 0 and 30, the user goes on
random walks for a certain number of trials. The user always moves one step along the x-axis or
the y-axis for each step of the walk. Each step is randomly generated by the use of the list 
forwardback and the random variable moveXorY. After the user completes a random walk, the program 
checks if the user is within 4 units of the starting point (0,0). If the trip left the user close 
enough to walk home (within 4), 1 is added to variable "walk". After each walk, the beginning
coordinates are reset. The length of the walk, A, is saved to the variable "blocks" if the user is
within walking distance at least 50% of the time.
"""

"""
Monte Carlo Simulations Research:
- What are they?
	Monte Carlo simulations are computerized mathematical techniques that account for risk. They
	provide the user a range of all possible outcomes and probabilities.

- What can they be used for?
	Monte Carlo simulations can be used for risk management in a variety of fields including, but not
	limited to: finance, manufacturing engineering, energy, and project management.

- How do they work?
	Monte Carlo simulations create probability distributions by building models of potential outcome
	values. Recalculating values over and over again enable them to accurately depict all 
	possibilities.
"""


""" Sources:
random.choice & random.uniform - https://docs.python.org/2/library/random.html
"""

import random
from random import *

import math
from math import *


### Monte Carlo Simulation

x,y = 0,0 # home coordinates

trips = 10000
blocks = 0

forwardback = [1.0, -1.0] # person moves forward one, back one, up one, or down one for each step

for A in range(40):
	walk = 0
	for i in range(trips): # trials to find average for one block value
		for j in range(A): # walking away from home once
			moveXorY = randint(0,1) # person moves along x-axis or y-axis
			if moveXorY == 0:
				x += choice(forwardback)
			elif moveXorY == 1:
				y += choice(forwardback)

		if abs(x) + abs(y) <= 4:
			walk += 1

		# reset x and y coordinates after each trip
		x,y = 0,0

	if walk/trips >= 50/100:
		blocks = A

# print(str(walk) + "/" + str(trips)) # result: walks about 80% of the time (800/1000) for 10 blocks
print(blocks)


### Dart Simulation

trials = 100000
circle = 0

for i in range(trials): # number of times dart is thrown
	x,y = uniform(-1,1), uniform(-1,1)

	if (x**2 + y**2 < 1):
		circle += 1 # number of trials where the dart makes it within the circle

num = (circle*4)/trials
print(num)


""" Observations about output of dart simulation: 
	As the number of trials, or times the dart is thrown at the target, increases, the number, num,
	gets closer to pi and oscillates less.
"""


